void	update_map(t_data *data)
{
	int	i;
	int x;
	int y;

	i = -1;
	while ( ++i < data->map->f_count)
	{
		x = data->foe_info[i].x;
		y = data->foe_info[i].y;
		data->map->map[y][x] = 'F';
		printf("-->>> %d, %d: x = %d, y = %d -> %c - %c\n",i, data->foe_info[i].dir, x, y, data->map->map[y][x], data->map->map[y][x - 1]);
		printf("-->>> %d, %d: x = %d, y = %d -> %c - %c\n",i, data->foe_info[i].dir, x, y, data->map->map[y][x], data->map->map[y][x + 1]);
		for (int y = 0; y < data->map->row_num; y++)
		{
			printf("\n");
			for (int x = 0; x < data->map->col_num; x++)
			printf("%c", data->map->map[y][x]);
		}
		printf("\n");
		if (data->foe_info[i].dir == LEFT && ft_strchr("1CE", data->map->map[y][x + 1]) == NULL)
			data->map->map[y][x + 1] = '0';
		else if (data->map->map[y][x - 1] != 'F' && data->map->map[y][x + 1] != 'F')
		{
			data->map->map[y][x] = '0';
			data->map->map[y][x + 1] = 'F';
		}
		else if (data->map->map[y][x - 1] == 'F')
			data->map->map[y][x - 2] = '0';
		printf("veamos que pas√≥ wey\n");
		for (int y = 0; y < data->map->row_num; y++)
		{
			printf("\n");
			for (int x = 0; x < data->map->col_num; x++)
			printf("%c", data->map->map[y][x]);
		}
		printf("\n");
	}
}
void	register_foes(t_data *data, int y, int x)
{
	static int n;

	data->foe_info[n].x = x;
	data->foe_info[n].y = y;
	data->foe_info[n].dir = LEFT;
	data->map->ff_map[y][x] = n++;
}

void	move_foe_left(t_data *data, int y, int x, int n)
{
	merge_tile(data, data->items->foe[data->sprite_state], y, x - 1);
	draw_tile(data, data->items->floor, y, x);
	data->map->ff_map[y][x] = -1;
	data->map->ff_map[y][x - 1] = n;
	data->foe_info[n].x = x - 1;
}

void	move_foe_right(t_data *data, int *y, int *x, int n)
{
	printf("movefoe_right!!!!\n");
	printf("x = %d, n = %d, dir = %d\n", *x, n, data->foe_info[n].dir);
	if (data->map->map[*y][*x + 1] == 'F')
	{
		data->map->ff_map[*y][*x + 2] = data->map->ff_map[*y][*x + 1];
		data->map->ff_map[*y][*x + 1] = n;
		data->map->map[*y][*x + 2] = 'F';
		data->map->map[*y][*x + 1] = 'F';
		data->map->map[*y][*x] = '0';
		merge_tile(data, data->items->foe[data->sprite_state], *y, *x + 2);
		data->foe_info[n + 1].x = *x + 2;
		data->foe_info[n + 1].dir = RIGHT;
		data->map->ff_map[*y][*x] = -1;
		merge_tile(data, data->items->foe[data->sprite_state], *y, *x + 1);
		draw_tile(data, data->items->floor, *y, *x);
		data->map->ff_map[*y][*x] = -1;
		data->map->ff_map[*y][*x + 1] = n;
		data->foe_info[n].x = *x + 1;
		*x += 2;
		printf("x = %d--------------\n", *x);
		return ;
	}
	merge_tile(data, data->items->foe[data->sprite_state], *y, *x + 1);
	draw_tile(data, data->items->floor, *y, *x);
	data->map->ff_map[*y][*x] = -1;
	data->map->ff_map[*y][*x + 1] = n;
	data->foe_info[n].x = *x + 1;
}

void	move_foe(t_data *data, int *y, int *x, int n)
{
	printf("n = %d, dir = %d\n", n, data->foe_info[n].dir);
	print_ff_matrix(*data->map);
		for (int j = 0; j < data->map->row_num; j++)
		{
			printf("\n");
			for (int k = 0; k < data->map->col_num; k++)
				printf("%c", data->map->map[j][k]);
		}
			printf("\n");
	if (data->foe_info[n].dir == LEFT)
	{
		printf("HE ENTRADO EN LEFT\n");
		if (ft_strchr("0P",data->map->map[*y][*x - 1]) != NULL)
			move_foe_left(data, *y, *x, n); 
		else if (ft_strchr("F",data->map->map[*y][*x - 1]) != NULL)
		{
			if (data->foe_info[data->map->ff_map[*y][*x - 1]].dir == RIGHT
				|| ft_strchr("1CE", data->map->map[*y][*x - 1]) != NULL)
			{
				move_foe_right(data, y, x, n);
				data->foe_info[n].dir = RIGHT;
			}
			else
				move_foe_left(data, *y, *x, n);
		}
		else
		{
			move_foe_right(data, y, x, n);
			data->foe_info[n].dir = RIGHT;
		}
	}
	else if (data->foe_info[n].dir == RIGHT)
	{
		printf("HE ENTRADO EN RIGHT\n");
		if (ft_strchr("0P",data->map->map[*y][*x + 1]) != NULL)
			move_foe_right(data, y, x, n);
		else if (ft_strchr("F",data->map->map[*y][*x + 1]) != NULL)
		{
			if (ft_strchr("1CE", data->map->map[*y][*x + 2]) != NULL)
			{
				move_foe_left(data, *y, *x, n);
				data->foe_info[n].dir = LEFT;
				data->foe_info[n + 1].dir = LEFT;
			}
			else
				move_foe_right(data, y, x, n);
		}
		else
		{
			move_foe_left(data, *y, *x, n);
			data->foe_info[n].dir = LEFT;
		}
	}
}